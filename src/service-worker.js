import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache SQL.js WASM file
registerRoute(
  /^https:\/\/sql\.js\.org\/dist\/.*/i,
  new CacheFirst({
    cacheName: 'sql-js-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 60 * 60 * 24 * 365 // 1 year
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200]
      })
    ]
  })
);

// Cache app shell
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'app-shell',
  })
);

// Cache static assets
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'image',
  new CacheFirst({
    cacheName: 'static-assets',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
      }),
    ],
  })
);

// Handle service worker updates
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Add version check for cache management
const CACHE_VERSION = '1.0.0';
const CACHE_NAME = `expensego-cache-${CACHE_VERSION}`;

self.addEventListener('activate', (event) => {
  event.waitUntil(
    Promise.all([
      self.clients.claim(),
      // Clean up old caches
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME) {
              return caches.delete(cacheName);
            }
          })
        );
      })
    ])
  );
});

// Handle offline fallback
self.addEventListener('install', (event) => {
  const offlinePage = new Response(
    '<html><body><h1>Offline</h1><p>The app is currently offline.</p></body></html>',
    {
      headers: { 'Content-Type': 'text/html' },
    }
  );
  event.waitUntil(
    caches.open('offline').then((cache) => cache.put('/offline.html', offlinePage))
  );
});

// Add these routes to your workbox configuration
workbox.routing.registerRoute(
  new RegExp('/ExpenseGo/#/.*'),
  new workbox.strategies.NetworkFirst()
);

workbox.routing.registerRoute(
  new RegExp('/ExpenseGo/manifest.webmanifest'),
  new workbox.strategies.NetworkFirst()
); 